version: "3"

networks:
  fakews:
    name: ${FAKEWS_NETWORK:-fakews}

services:
  console:
    image: christhomas/fakews-console:latest
    build:
      context: console
      dockerfile: Dockerfile
    depends_on:
      - console-api
    networks:
      - fakews
    environment:
      - VIRTUAL_HOST=console.aws.develop
      - CONSOLE_API=http://console-api.aws.develop

  console-api:
    image: christhomas/fakews-console-api:latest
    build:
      context: console-api
      dockerfile: Dockerfile
    networks:
      - fakews
    environment:
      - VIRTUAL_HOST=console-api.aws.develop

  # Local S3 using Minio S3 Implementation
  # This is split into two parts, the api and the gui console
  # https://github.com/minio/minio
  s3:
    image: minio/minio:latest
    command: server /data --json
    networks:
      - fakews
    volumes:
      - $PWD/data/s3:/data
    environment:
      - VIRTUAL_HOST=~^(|[a-z0-9\-]+\.)s3.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=9000
      - MINIO_ROOT_USER=fakewsrootuser
      - MINIO_ROOT_PASSWORD=fakewsrootpassword
      - MINIO_HTTP_TRACE=true

  # The GUI Console for the Minio S3 Implementation 
  s3-console:
    image: minio/console:latest
    command: server
    depends_on:
      - s3-dev
    networks:
      - fakews
    environment:
      - VIRTUAL_HOST=minio.aws.develop
      - CONSOLE_MINIO_SERVER=http://s3.eu-west-1.aws.develop

  # Local AWS Cognito Implementation
  # https://github.com/jagregory/cognito-local  
  cognito:
    image: jagregory/cognito-local:latest
    networks:
      - fakews
    volumes:
      - $PWD/data/cognito:/app/.cognito
    environment:
      - VIRTUAL_HOST=~cognito-idp.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=9229
      - DEBUG=1

  # Official Local AWS DynamoDB Implementation
  # https://hub.docker.com/r/amazon/dynamodb-local/
  dynamodb:
    image: amazon/dynamodb-local
    networks:
      - fakews
    environment:
      - VIRTUAL_HOST=~^dynamodb.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=8000

  # https://github.com/s12v/sns
  sns:
    image: s12v/sns
    networks:
      - fakews
    volumes:
      - $PWD/data/sns:/etc/sns
    environment:
      - VIRTUAL_HOST=~^sns.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=9911

  # https://github.com/softwaremill/elasticmq
  sqs:
    image: softwaremill/elasticmq:latest
    networks:
      - fakews
    volumes:
      - $PWD/config/sqs/custom.conf:/opt/elasticmq.conf
    environment:
      - QUEUE_HOST=~^sqs.eu-west-1.aws.develop
      - VIRTUAL_HOST=~^sqs.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=9324

#  sqs-experimental:
#    image: softwaremill/elasticmq-native:latest
#    networks:
#      - backbone
#    volumes:
#      - $PWD/config/sqs/custom.conf:/opt/elasticmq.conf
#    environment:
#      - QUEUE_HOST=sqs.eu-central-1.aws.develop
#      - VIRTUAL_HOST=~^sqs.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
#      - VIRTUAL_PORT=9324

  # https://github.com/picadoh/motocker
  iam:
    image: picadoh/motocker:latest
    networks:
      - fakews
    environment:
      - VIRTUAL_HOST=~^iam.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=5000
      - MOTO_SERVICE=iam


  # https://github.com/picadoh/motocker
  cloudwatch:
    image: christhomas/motocker:latest
    networks:
      - fakews
    environment:
      - VIRTUAL_HOST=~^logs.(eu|us|ap)-(east|west|central)-(1|2).aws.develop
      - VIRTUAL_PORT=5000
      - MOTO_SERVICE=cloudwatch

  # TODO: https://github.com/lambci/docker-lambda
  # TODO: https://medium.com/albert-franzi/accessing-s3-data-through-sql-with-presto-ddb6d4fbb99c
